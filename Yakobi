#include <vector>
#include <iostream>
#include <cmath>
using namespace std;

void solve(const vector<float> a, 
	const vector<float> b, 
	vector<float>& x, 
	const float allowed_error) 
{
	const unsigned n = x.size();
	vector<float> tmp_x(n);

	float error;

	do
	{
		error = 0;

		tmp_x = b;
		for (unsigned i = 0; i < n; ++i)
		{
			for (unsigned j = 0; j < n; ++j)
			{
				if (i != j)
				{
					tmp_x[i] -= a[i * n + j] * x[j];
				}
			}

			const float x_updated = tmp_x[i] / a[i * (n + 1)];
			const float e = fabs(x[i] - x_updated);
			x[i] = x_updated;
			if (e > error) { error = e; }
		}
	} while (error > allowed_error);
}

int main()
{
	unsigned n;

	cout << "\nenter size:\nn = ";
	cin >> n;

	vector<float> x(n);
	vector<float> a(n * n);
	vector<float> b(n);

	cout << "\nenter b: \n";
	for (auto& b_elem : b)
	{
		cin >> b_elem;
	}

	cout << "\nenter a:\n";
	for (auto& a_elem : a)
	{
		cin >> a_elem;
	}

	float allowed_error;
	cout << "\nenter allowed error: \n";
	cin >> allowed_error;

	solve(a, b, x, allowed_error);

	cout << "\nsolution: \n";
	for (unsigned i = 0; i < n; ++i)
	{
		cout << "\nx[" << i << "]=  " << x[i];
	}
	system("pause");
}
