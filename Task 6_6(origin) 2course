#include <iostream>
#include <cassert>
#include <cstdlib>
#include <ctime>

template <class T>
class TStack
{
protected:
	struct TNode
	{
		T value;
		TNode* next;
	}*stack;

public:
	TStack() : stack(NULL) { ; }

	~TStack()
	{
		Clear();
	}

	TStack<T>& Push(T value)
	{
		TNode* node = new TNode();
		node->value = value;
		node->next = stack;

		stack = node;

		return *this;
	}

	T Pop()
	{
		assert(stack != NULL);

		T value = stack->value;

		TNode* node = stack;

		stack = stack->next;

		delete node;

		return value;
	}

	T Top() const
	{
		assert(stack != NULL);

		return stack->value;
	}

	bool IsNull() const
	{
		return (stack == NULL);
	}

	void Clear()
	{
		for (; !IsNull(); Pop());
	}

	friend std::ostream& operator << (std::ostream& os, const TStack<T>& stack)
	{
		typename TStack<T>::TNode* node = stack.stack;

		for (; node; node = node->next)
		{
			os << node->value << " ";
		}

		return os;
	}
};

int main()
{
	srand(time(NULL));

	TStack<int> list1;
	TStack<char> list2;

	for (size_t i = 0; i < 10; ++i)
	{
		list1.Push(rand() % 100);
		list2.Push('a' + (rand() % 26));
	}

	std::cout << list1 << std::endl
		<< list2 << std::endl;

	system("pause");

	return 0;
}
