#include<iostream>

using namespace std;

class Vector
{
	private:
		int *vector;
		int vector_size;
public:
	Vector() {}
	Vector(int size)
	{
		this->vector_size = size;
		vector = (int*)calloc(vector_size, sizeof(int));
		for (int i = 0; i < vector_size; ++i)
		{
			cout << "Enter vector[" << i << "]: ";
			cin >> vector[i];
		}
		cout << "Default constructor Vector(int size) done!\n";
	}
	Vector(const Vector& temp)
	{
		this->vector_size = temp.vector_size;
		*this->vector = *temp.vector;
		cout << "Copy constructor Vector(const Vector& temp) done!\n";
	}
	virtual ~Vector()
	{
		delete[] vector;
		cout << "Destructor ~Vector() done!\n";
	}

	virtual int*getVector()
	{
		return vector;
	}
	virtual int getVector_size()
	{
		return vector_size;
	}
	virtual void outVector()
	{

	}
	virtual void outMatrix()
	{

	}
	virtual void multiply()
	{

	}
	virtual void outMultiplied()
	{

	}
};

class Matrix :public Vector
{
private:
	int **matrix;
	int matrix_size1, matrix_size2;
	int vector_size;
	int *vector;
	int *multiplied;
public:
	Matrix(){}
	Matrix(int size, int size1, int size2) :Vector(size)
	{
		this->vector = getVector();
		this->vector_size = getVector_size();
		this->matrix_size1 = size1;
		this->matrix_size2 = size2;
		multiplied = (int*)calloc(vector_size, sizeof(int));
		matrix = (int**)calloc(matrix_size1, sizeof(int));
		for (int i = 0; i < matrix_size2; ++i)
		{
			matrix[i] = (int*)calloc(matrix_size2, sizeof(int));
			for (int j = 0; j < matrix_size2; ++j)
			{
				cout << "Enter element[" << i << "][" << j << "]: ";
				cin >> matrix[i][j];
			}
		}
	}
	Matrix(const Matrix& temp) :Vector(temp)
	{
		**this->matrix = **temp.matrix;
		this->matrix_size1 = temp.matrix_size1;
		this->matrix_size2 = temp.matrix_size2;
		*this->multiplied = *temp.multiplied;
		*this->vector = *temp.vector;
		this->vector_size = temp.vector_size;
		cout << "Copy constructor Matrix(const Matrix& temp) :Vector() done!\n";
	}
	virtual ~Matrix()
	{
		for (int i = 0; i < matrix_size1; ++i)
		{
			delete[] matrix[i];
		}
		delete[] matrix;
		delete[] multiplied;
		delete[] vector;
		cout << "Destructor ~Matrix() done!\n";
	}
	virtual void outVector()
	{
		cout << "Vector: \n";
		for (int i = 0; i < vector_size; ++i)
		{
			cout << vector[i] << "\n";
		}
	}
	virtual void outMatrix()
	{
		cout << "Matrix: \n";
		for (int i = 0; i < matrix_size2; ++i)
		{
			for (int j = 0; j < matrix_size2; ++j)
			{
				cout << matrix[i][j];
				cout << " ";
			}
			cout << endl;
		}
		cout << endl;
	}
	virtual void multiply()
	{
		for (int i = 0; i < matrix_size1; i++)
		{
			for (int j = 0; j < matrix_size2; j++)
			{
				multiplied[i] += matrix[i][j] * vector[j];
			}
			cout << endl;
		}
	}
	virtual void outMultiplied()
	{
		cout << "Multiplied: \n";
		for (int i = 0; i < vector_size; ++i)
		{
			cout << multiplied[i] << "\n";
			multiplied[i] = 0;
		}
		cout << endl << "===============================" << endl << endl;
	}
};

void main()
{
	//Matrix(Vect_size, matr size, matr size)
	Vector *A = new Matrix(2, 2, 2);
	/*Vector *B = new Matrix(3, 3, 3);
	Vector *C = new Matrix(4, 4, 4);*/
	A->outMatrix();
	A->outVector();
	A->multiply();
	A->outMultiplied();
	/*B->outMatrix();
	B->outVector();
	B->multiply();
	B->outMultiplied();
	C->outMatrix();
	C->outVector();
	C->multiply();
	C->outMultiplied();*/


	cout << "==============================\n";


	system("pause");
}
