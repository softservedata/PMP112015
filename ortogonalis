#include<iostream>

using namespace std;

class Vector {
public:
	int **arr;
	int **g;
	int x;
	int y;
	int **k;
	double l;
	Vector(int x = 0, int y = 0)
	{
		this->x = x;
		this->y = y;
		l = 0;
		arr = new int*[x];
		g = new int*[x];
		k = new int*[x];
		for (int i = 0; i < x; ++i)
		{
			arr[i] = new int[y];
			g[i] = new int[y];
			k[i] = new int[y];
		}
		for (int i = 0; i < x; ++i)
		{
			for (int j = 0; j < y; ++j)
			{
				cin>>arr[i][j];
				
				if (j == 0) { g[i][j] = arr[i][j]; }
				else { g[i][j] = 1; }
			}

		}


	}
	int multiply(int **a, int *b, int i)
	{
		int c = 0;

		for (int j = 0; j < this->x; ++j)
		{
			c = c + (a[j][i] * b[i]);

			
		}
		return c;
	}
	int multiply(int *a, int *b)
	{
		int c = 0;
		for (int i = 0; i < this->y; ++i)
		{
			c = c + (a[i] * b[i]);
		}
		return c;
	}
	int* multiply(int a, int *b) 
	{
		for (int i = 0; i < this->y; ++i) 
		{
			b[i] = b[i] * a;
		}
		return b;
	}
	int* minus(int** a, int *b, int i)
	{
		for (int j = 0; j < this->y; ++j)
		{
			a[j][i] = (a[j][i] - b[i]);
		}
		return b;
	}
	int* minus(int* a, int *b) 
	{
		for (int j = 0; j < this->y; ++j) 
		{
			a[j] = a[j] - b[j];
		}
		return a;
	}
	int * dorivnue(int* g,int*k)
	{
		for (int j = 0; j < this->y; ++j) 
		{
			g[j] = k[j];
		}
	}
	void ortogonal() 
	{
		for (int i = 1; i < this->x-1; ++i) 
		{
			for (int j = 0; j<i ; ++j)
			{
			g[i+1]=minus(g[i+1],multiply((multiply(arr, g[i], i) / (multiply(g[i], g[i]))),g[i]));
			}
			
		}
		
		for (int i = 0; i < this->x; ++i)
		{
			for (int j = 0; j < this->y; ++j)
			{
				l = l + (g[i][j] * g[i][j]);
			}
			for (int j = 0; j < this->y; ++j)
			{
				cout <<   g[i][j] << "/sqrt" << l<<"  ";
			}
			l = 0;
			cout << endl;
		}

	
	}


};


void main() 
{
	Vector matrix(3, 4);
	matrix.ortogonal();
}
