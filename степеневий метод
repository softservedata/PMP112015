#include<iostream>
#include<fstream>
using namespace std;

class Equation
{
private:
	char file[100];
	int n;
	double e;
	double** A;
	double* yk;
	double* yk1;
	double* x;
	double* L;
	double Lmax;
	double* V;
public:
	Equation()
	{
		cout << "constructor 0" << endl;
		n = 1;
		A = new double*[n];
		A[0] = new double[n];
		yk = new double[n];
		yk1 = new double[n];
		x = new double[n];
		L = new double[100];
		V = new double[100];
		Lmax = 0;
		A[0][0] = 0;
	}
	Equation(char* file)
	{
		strcpy_s(this->file, file);
		cout << "constructor 1" << endl;
		ifstream  data(file);
		data >> n;
		data >> e;
		A = new double*[n];
		A[0] = new double[n];
		yk = new double[n];
		yk1 = new double[n];
		x = new double[n];
		L = new double[100];
		Lmax = 0;
		for (int i = 0; i < n; i++)
		{
			A[i] = new double[n];
			for (int j = 0; j < n; j++)
			{
				data >> A[i][j];

			}
		}
		for (int i = 0; i < n; i++)
		{
			data >> yk[i];
		}
		data.close();
	}
	double multiplyV(double* c, double* d)
	{
		double s = 0;
		for (int i = 0; i < n; i++)
		{
			s = s + (c[i] * d[i]);
		}
		//cout << "\ns=" << s;
		return s;
	}
	double* searchY(double* x)
	{
		double* Y;
		Y = new double[n];
		for (int i = 0; i < n; i++)
		{
			double s = 0;
			s = s + multiplyV(A[i], x);
			Y[i] = s;
		}
		return Y;
	}
	double searchL(double* yk, double* x)
	{
		double l;
		l = multiplyV(yk, yk) / multiplyV(yk, x);
		return l;
	}
	double* searchX(double* yk)
	{
		double s = multiplyV(yk, yk);
		double* X;
		X = new double[n];
		for (int i = 0; i < n; i++)
		{
			X[i] = yk[i] / sqrt(s);
		}
		return X;
	}
	double Sum2(int i)
	{
		double s = 0;
		for (int j = i + 1; j < n; j++)
		{
			s = s + A[i][j] * x[j];
		}
		return s;
	}
	bool IsLess(double l1, double l2)
	{
		if (abs(l1 - l2) < e)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	void searchV()
	{
		double m;
		for (int k = 0; k < n-1; k++)
		{
			for (int i = k+1; i < n; i++)
			{
				if (A[i][k] == 0)
				{
					continue;
				}
				m = -A[i][k] / A[k][k];
				for (int j = k + 1; j < n; j++)
				{
					A[i][j] = A[i][j] + m*A[k][j];
				}
			}
		}
		for (int i = n; i > 0; i--)
		{
			double s;
			for (int j = 0; j < n; j++)
			{
				s = Sum2(i);
				x[i] =  s / A[i][i];
			}
		}
	}
	void method()
	{
		int i = 0;
		while (IsLess(L[i],Lmax))
		{
			x = searchX(yk);
			yk1 = yk;
			yk = searchY(x);
			L[i] = searchL(yk, x);
			if (abs(L[i]) > abs(Lmax))
			{
				Lmax = L[i];
			}
			i++;
		}
		for (int i = 0; i < n; i++)
		{
			A[i][i] = A[i][i] - Lmax;
		}
		searchV();
	}
	void print()
	{
		cout << "\nA=\n";
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				cout << A[i][j] << " ";
			}
			cout << endl;
		}
		cout << endl;
		cout << "\ne=\n"<<e;
		cout << "\nx=\n";
		for (int i = 0; i < n; i++)
		{
			cout << x[i] << " ";
		}
		cout << endl;
		cout << "\nl=\n"<<Lmax;
		cout << endl;
	}
	void write()
	{
		ofstream data;
		data.open(file, std::fstream::app);
		data << "\nanswer is: \n";
		data << "\nl=\n" << Lmax;
		data << endl;
		for (int i = 0; i < n; i++)
		{
			data << x[i] << " ";
		}
		data << endl;
		data.close();
		cout << "writing in file is done\n";
	}
	~Equation()
	{
		cout << "destructor" << endl;
		for (int i = 0; i < n; i++)
		{
			delete[] A[i];
		}
		delete[] A;
		delete[] x;
		delete[] L;
	}
};
int main()
{
	//choose any file: "matrix1.txt"/"matrix2.txt"/"matrix3.txt"/"matrix4.txt"
	Equation first("matrix1.txt");
	//first.print();
	first.method();
	first.print();
	first.write();
	system("pause");
	return 0;
}
