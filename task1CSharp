using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace software_1
{
    class G
    {
        private int n;
        private int[,] m;
        int[] l = new int[16];
        bool[] flag = new bool[11];
        public G()
        {
           
        }
        public void Create()
        {
            Console.WriteLine("Enter number vertices");
            n = int.Parse(Console.ReadLine());
            m = new int[n, n];
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write("Enter m[{0},{1}]=", i, j);
                    m[i, j] = int.Parse(Console.ReadLine());
                }
            }
        }
        public void See()
        {
            for (int i = 0; i < n; i++)
            {
                Console.WriteLine();
                for (int j = 0; j < n; j++)
                {
                    Console.Write(m[i, j] + "\t");
                }
            }
            Console.WriteLine();
        }
        public G(int[,] s,int n)
        {
            this.m = s;
            this.n = n;
        }
        int min(int n)
        {
            int i, result = 0;
            for (i = 0; i < n; i++)
                if (!(flag[i])) result = i;
            for (i = 0; i < n; i++)
                if ((l[result] > l[i]) && (!flag[i])) result = i;
            return result;
        }
        int minim(int x, int y)
        {
            if (x < y) return x;
            return y;
        }
        public void deikstra()
        {
            {
                int i, j, xn, xk, p;
                string[] path = new string[80];
                string s = "";
                for (i = 0; i < n; i++)
                    for (j = 0; j < n; j++)
                        if (m[i, j] == 0) m[i, j] = 65535; 
                Console.Write(" begin point: ");
                xn = Convert.ToInt32(Console.ReadLine());
                Console.Write(" end point: ");
                xk = Convert.ToInt32(Console.ReadLine());
                int rem = xk;
                xk--;
                xn--;

                if (xn == xk)
                {

                    Console.WriteLine("pegin point == end point");
                    Console.ReadLine();
                    return;
                }

                for (i = 0; i < n; i++)
                {
                    flag[i] = false;
                    l[i] = 65535;
                }
                l[xn] = 0;
                flag[xn] = true;
                p = xn;
                //s = (xn).ToString();
                for (i = 1; i <= n; i++)
                {
                    path[i] = "X";
                    path[i] += (xn+1).ToString();
                }
                do
                {
                    for (i = 0; i < n; i++)
                        if ((m[p, i] != 65535) && (!flag[i]) && (i != p))
                        {
                            if (l[i] > l[p] + m[p, i])
                            {                                
                                s = (i+1).ToString();
                                path[i + 1] = path[p + 1];
                                path[i + 1] += "=";
                                path[i + 1] += s;
                            }
                            l[i] = minim(l[i], l[p] + m[p, i]);
                        }
                    p = min(n);
                    flag[p] = true;
                }
                while (p != xk);

                if (l[p] != 65535)
                {
                    Console.Write("Put: ");

                        Console.Write(path[p+1]);

                    Console.WriteLine();
                    Console.Write("\n");
                    Console.Write("Path lendth: ");
                    Console.Write(l[p]);
                    Console.Write("\n");

                }
                else
                    Console.Write("Path not exist");
                Console.Write("\n");

            }
        }
        public static G operator -(G obj1, G obj2)
        {
            G temp = new G();
            temp.n = obj1.n;
            int[,] tm = new int[temp.n, temp.n];
            for (int i = 0; i < temp.n; i++)
            {
                for (int j = 0; j < temp.n; j++)
                {
                    tm[i, j] = obj1.m[i,j];
                }
            }
            for (int i = 0; i < temp.n; i++)
            {
                for (int j = 0; j < temp.n; j++)
                {
                    if (obj2.m[i, j] == 0) { tm[i, j] = 0; };
                }
            }
            temp.m = tm;
            return temp;
        }
        public static G operator +(G obj1, G obj2)
        {
            G temp = new G();
            temp.n = obj1.n + obj2.n;
            int[,] tm = new int[temp.n, temp.n];
            for(int i=0;i<obj1.n;i++)
            {
                for (int j = 0; j < obj1.n; j++)
                {
                    tm[i, j] = obj1.m[i,j];
                }
            }
            for (int i = obj1.n; i < temp.n; i++)
            {
                for (int j = obj1.n; j < temp.n; j++)
                {
                    tm[i, j] = obj2.m[i- obj1.n, j- obj1.n];
                }
            }
            temp.m = tm;
            Console.WriteLine("done add");
            return temp;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            int[,] z1 = new int[,] { { 0, 7, 9, 65535, 65535, 14 }, { 7, 0, 10, 15, 65535, 65535 }, { 9, 10, 0, 11, 65535, 2 }, { 65535, 15, 11, 0, 6, 65535 }, { 65535, 65535, 65535, 6, 0, 9 }, { 14, 65535, 2, 65535, 9, 0 } };
            int[,] z2 = new int[,] { { 6, 7 }, { 8, 9 } };
            G g1 = new G(z1,6);
            G g2 = new G(z2,2);            
            g1 = g1 + g2;
            g1.See();
            Console.WriteLine("====================");
            int[,] x1 = new int[,] { { 0, 7, 9, 65535, 65535, 14 }, { 7, 0, 10, 15, 65535, 65535 }, { 9, 10, 0, 11, 65535, 2 }, { 65535, 15, 11, 0, 6, 65535 }, { 65535, 65535, 65535, 6, 0, 9 }, { 14, 65535, 2, 65535, 9, 0 } };
            int[,] x2 = new int[,] { { 0,0,0,0,0,0 }, { 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0 }, { 65535, 15, 11, 0, 6, 65535 }, { 65535, 65535, 65535, 6, 0, 9 }, { 14, 65535, 2, 65535, 9, 0 } };
            g1 = new G(x1,6);
            g2 = new G(x2, 6);
            g1 = g1 - g2;
            g1.See();
            Console.WriteLine("========================");
            G g = new G(z1,6);
            g.deikstra();
            Console.ReadLine();
        }
    }
}

