#include <iostream>
using namespace std;


double Alpha(double A, double B, double C, double alpha)
{
	double alpha_Iplus1;
	alpha_Iplus1 = B / (C - A * alpha);
	return alpha_Iplus1;
}
double Beta(double A, double C, double F, double alpha, double beta)
{
	double beta_Iplus1;
	beta_Iplus1 = (F + A * beta) / (C - A * alpha);
	return beta_Iplus1;
}
double Ksi(double A, double B, double C, double ksi_Iplus1)
{
	double bottom_ksi_i;
	bottom_ksi_i = A / (C - B * ksi_Iplus1);
	return bottom_ksi_i;
}
double Eta(double B, double C, double F, double ksi_Iplus1, double eta_Iplus1)
{
	double bottom_eta_i;
	bottom_eta_i = (F + B * eta_Iplus1) / (C - B * ksi_Iplus1);
	return bottom_eta_i;
}
double Yi(double alpha, double beta, double ksi, double eta)
{
	double Y_m_minus1;
	Y_m_minus1 = (beta + alpha*eta) / (1 - ksi*alpha);
	return Y_m_minus1;
}


void main()
{
#pragma region Initialization
	int size;
	int a = 0;
	int b = 0;
	int c = 0;
	cout << "Enter size of matrix NxN: ";
	cin >> size;

	double **Matrix_A = (double**)calloc(size, sizeof(double));
	for (int i = 0; i < size; ++i)
	{
		Matrix_A[i] = (double*)calloc(size, sizeof(double));
	}
	double *F = (double*)calloc(size, sizeof(double));
	double *A = (double*)calloc(size - 1, sizeof(double));//have to be reversed
	double *B = (double*)calloc(size, sizeof(double));//have to be reversed
	double *C = (double*)calloc(size, sizeof(double));
	double *Y = (double*)calloc(size, sizeof(double));
	double *alpha = (double*)calloc(size, sizeof(double));
	double *beta = (double*)calloc(size, sizeof(double));
	double *ksi = (double*)calloc(size, sizeof(double));
	double *eta = (double*)calloc(size, sizeof(double));
#pragma endregion
#pragma region MatrixIn

	int n;
	n = size - 1;
	double l = 10;
	double h;
	h = 1 / l;
	for (int i = 0; i < n; ++i)
	{
		A[i] = (1 / pow(h, 2) + (1 + i*h) / 2 * h);
		C[i] = 1 + 2 / pow(h, 2);
	}
	for (int i = 1; i < size; ++i)
	{
		B[i] = (1 / pow(h, 2) - (1 + i*h) / 2 * h);
	}
	for (int i = 1; i < n; ++i)
	{
		F[i] = -(2 / pow((1 + i*h), 2));
	}
	F[0] = 1; F[n] = 0.5;
	for (int i = 0; i < n; ++i)
	{
		Matrix_A[i + 1][i] = A[i];
		Matrix_A[i][i + 1] = B[i];
		Matrix_A[i + 1][i + 1] = -C[i];
	}
	Matrix_A[0][0] = 1;
	Matrix_A[n][n] = 1;
	for (int i = 0; i < n; ++i)
	{
		Matrix_A[i][i + 1] = B[i+1];
	}
	Matrix_A[0][1] = -h;
	Matrix_A[n][n - 1] = -2 * h;

	eta[n] = Matrix_A[n][n - 1];
#pragma endregion
#pragma region CoutMatrixAndVector
	cout << "Matrix A:" << endl;
	for (int i = 0; i<size; ++i)
	{
		for (int j = 0; j < size; ++j)
		{
			cout << Matrix_A[i][j] << "\t";
		}
		cout << endl;
	}

	cout << "Vector F:" << endl;
	for (int i = 0; i < size; i++)
	{
		cout << F[i] << endl;
	}
#pragma endregion
#pragma region CalcElements
	alpha[0] = Matrix_A[0][1];
	beta[0] = F[0];
	ksi[n] = Matrix_A[0][1];
	eta[n] = F[n];
	for (int i = 0; i < (size / 2); ++i)
	{
		alpha[i+1] = Alpha(A[i], B[i+1], C[i], alpha[i]); // correct!
		beta[i+1] = Beta(A[i], C[i], F[i], alpha[i], beta[i]); // correct!
	}
	for (int i = n-1; i >= (size / 2)-1; --i)
	{
		ksi[i] = Ksi(A[i], B[i+1], C[i], ksi[i + 1]); // correct!
		eta[i] = Eta(B[i + 1], C[i], F[i], ksi[i + 1], eta[i + 1]);// correct!
	}
	int sz = size / 2;
	Y[sz - 1] = Yi(alpha[sz], beta[sz], ksi[sz], eta[sz]);

	for (int i = sz - 2; i >= 0; --i)
	{
		Y[i] = alpha[i+1]*Y[i+1] + beta[i+1];
	}
	for (int i = sz - 1; i <= size; ++i)
	{
		Y[i + 1] = ksi[i + 1] * Y[i] + eta[i + 1];
	}
#pragma endregion
#pragma region CoutElements
	for (int i = 0; i < n - 1; ++i)
	{
		cout << "A[" << i << "]: " << A[i] << endl;
	}
	for (int i = 0; i < n; ++i)
	{
		cout << "B[" << i << "]: " << B[i] << endl;
	}
	for (int i = 0; i < n - 1; ++i)
	{
		cout << "C[" << i << "]: " << C[i] << endl;
	}
	for (int i = 0; i < n; ++i)
	{
		cout << "alpha[" << i << "]: " << alpha[i] << endl;
	}
	for (int i = 0; i < n; ++i)
	{
		cout << "beta[" << i << "]: " << beta[i] << endl;
	}
	for (int i = 0; i < size; ++i)
	{
		cout << "ksi[" << i << "]: " << ksi[i] << endl;
	}
	for (int i = 0; i < size; ++i)
	{
		cout << "eta[" << i << "]: " << eta[i] << endl;
	}
	for (int i = 0; i <size; ++i)
	{
		cout << "Y[" << i << "]: " << Y[i] << endl;
	}
	for (int i = 1; i < n-1; ++i)
	{
		cout << A[i] * Y[i - 1] - C[i] * Y[i] + B[i+1] * Y[i + 1] << " = " << -F[i] << endl;
	}
#pragma endregion
	system("pause");
}
